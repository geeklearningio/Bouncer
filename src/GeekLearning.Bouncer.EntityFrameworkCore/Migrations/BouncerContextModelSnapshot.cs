// <auto-generated />
using System;
using GeekLearning.Bouncer.EntityFrameworkCore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GeekLearning.Bouncer.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(BouncerContext))]
    partial class BouncerContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GeekLearning.Bouncer.EntityFrameworkCore.Data.Authorization", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreationBy")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid?>("ModificationBy")
                        .IsRequired();

                    b.Property<DateTime>("ModificationDate");

                    b.Property<Guid>("PrincipalId");

                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("ScopeId");

                    b.HasKey("Id");

                    b.HasIndex("PrincipalId");

                    b.HasIndex("ScopeId");

                    b.HasIndex("RoleId", "ScopeId", "PrincipalId")
                        .IsUnique();

                    b.ToTable("Authorization");
                });

            modelBuilder.Entity("GeekLearning.Bouncer.EntityFrameworkCore.Data.Group", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<Guid?>("CreationBy")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid?>("ModificationBy")
                        .IsRequired();

                    b.Property<DateTime>("ModificationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Group");
                });

            modelBuilder.Entity("GeekLearning.Bouncer.EntityFrameworkCore.Data.Membership", b =>
                {
                    b.Property<Guid>("GroupId");

                    b.Property<Guid>("PrincipalId");

                    b.Property<Guid?>("CreationBy")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid?>("ModificationBy")
                        .IsRequired();

                    b.Property<DateTime>("ModificationDate");

                    b.HasKey("GroupId", "PrincipalId");

                    b.HasIndex("PrincipalId");

                    b.ToTable("Membership");
                });

            modelBuilder.Entity("GeekLearning.Bouncer.EntityFrameworkCore.Data.ModelModificationDate", b =>
                {
                    b.Property<byte>("Id");

                    b.Property<DateTime>("Rights");

                    b.Property<DateTime>("Roles");

                    b.Property<DateTime>("Scopes");

                    b.HasKey("Id");

                    b.ToTable("ModelModificationDate");
                });

            modelBuilder.Entity("GeekLearning.Bouncer.EntityFrameworkCore.Data.Principal", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreationBy")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid?>("ModificationBy")
                        .IsRequired();

                    b.Property<DateTime>("ModificationDate");

                    b.HasKey("Id");

                    b.ToTable("Principal");
                });

            modelBuilder.Entity("GeekLearning.Bouncer.EntityFrameworkCore.Data.Right", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreationBy")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid?>("ModificationBy")
                        .IsRequired();

                    b.Property<DateTime>("ModificationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Right");
                });

            modelBuilder.Entity("GeekLearning.Bouncer.EntityFrameworkCore.Data.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreationBy")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate");

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid?>("ModificationBy")
                        .IsRequired();

                    b.Property<DateTime>("ModificationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Role");
                });

            modelBuilder.Entity("GeekLearning.Bouncer.EntityFrameworkCore.Data.RoleRight", b =>
                {
                    b.Property<Guid>("RoleId");

                    b.Property<Guid>("RightId");

                    b.HasKey("RoleId", "RightId");

                    b.HasIndex("RightId");

                    b.ToTable("RoleRight");
                });

            modelBuilder.Entity("GeekLearning.Bouncer.EntityFrameworkCore.Data.Scope", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<Guid?>("CreationBy")
                        .IsRequired();

                    b.Property<DateTime>("CreationDate");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300);

                    b.Property<bool>("IsDeletable");

                    b.Property<Guid?>("ModificationBy")
                        .IsRequired();

                    b.Property<DateTime>("ModificationDate");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(150);

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Scope");
                });

            modelBuilder.Entity("GeekLearning.Bouncer.EntityFrameworkCore.Data.ScopeHierarchy", b =>
                {
                    b.Property<Guid>("ParentId");

                    b.Property<Guid>("ChildId");

                    b.HasKey("ParentId", "ChildId");

                    b.HasIndex("ChildId");

                    b.ToTable("ScopeHierarchy");
                });

            modelBuilder.Entity("GeekLearning.Bouncer.EntityFrameworkCore.Data.Authorization", b =>
                {
                    b.HasOne("GeekLearning.Bouncer.EntityFrameworkCore.Data.Principal", "Principal")
                        .WithMany()
                        .HasForeignKey("PrincipalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GeekLearning.Bouncer.EntityFrameworkCore.Data.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GeekLearning.Bouncer.EntityFrameworkCore.Data.Scope", "Scope")
                        .WithMany("Authorizations")
                        .HasForeignKey("ScopeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GeekLearning.Bouncer.EntityFrameworkCore.Data.Group", b =>
                {
                    b.HasOne("GeekLearning.Bouncer.EntityFrameworkCore.Data.Principal", "AssociatedPrincipal")
                        .WithOne("Group")
                        .HasForeignKey("GeekLearning.Bouncer.EntityFrameworkCore.Data.Group", "Id")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GeekLearning.Bouncer.EntityFrameworkCore.Data.Membership", b =>
                {
                    b.HasOne("GeekLearning.Bouncer.EntityFrameworkCore.Data.Group", "Group")
                        .WithMany("Members")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("GeekLearning.Bouncer.EntityFrameworkCore.Data.Principal", "Principal")
                        .WithMany()
                        .HasForeignKey("PrincipalId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GeekLearning.Bouncer.EntityFrameworkCore.Data.RoleRight", b =>
                {
                    b.HasOne("GeekLearning.Bouncer.EntityFrameworkCore.Data.Right", "Right")
                        .WithMany("Roles")
                        .HasForeignKey("RightId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GeekLearning.Bouncer.EntityFrameworkCore.Data.Role", "Role")
                        .WithMany("Rights")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("GeekLearning.Bouncer.EntityFrameworkCore.Data.ScopeHierarchy", b =>
                {
                    b.HasOne("GeekLearning.Bouncer.EntityFrameworkCore.Data.Scope", "Child")
                        .WithMany("Parents")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("GeekLearning.Bouncer.EntityFrameworkCore.Data.Scope", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Restrict);
                });
#pragma warning restore 612, 618
        }
    }
}
